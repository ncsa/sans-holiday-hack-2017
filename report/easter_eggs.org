* Story Page
** Wintered logo is based on the Wicked stage musical poster.

[[./images/HHC_banner.png]]

#+attr_html: :width 350px
[[./images/wicked_poster.jpg]]

** Short video is based on video intro to Rudolph the Red-Nosed Reindeer
#+BEGIN_CENTER
#+HTML: <iframe width="560" height="315" src="https://www.youtube.com/embed/g9ByiEGfAXk?rel=0&amp;start=99" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>
#+END_CENTER

* North Pole and Beyond
** Stocking

The text field for entering the SHA1 hashes of the great book pages appears to have some placeholder text in it, =686579212121202d436f756e746572204861636b=. This is in hex and can be converted to ascii, =hey!!! -Counter Hack=.

** Exploration

*** NPPD Find the Message in the Stars

#+BEGIN_CENTER
#+HTML: <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I have not seen anyone who unlocked the achievement for “Find The Message in the Stars” for <a href="https://twitter.com/hashtag/SANSHolidayHack?src=hash&amp;ref_src=twsrc%5Etfw">#SANSHolidayHack</a></p>&mdash; Madeye Moody (@madeye_c3t) <a href="https://twitter.com/madeye_c3t/status/951542090026110977?ref_src=twsrc%5Etfw">January 11, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
#+END_CENTER

[[https://twitter.com/madeye_c3t/][@madeye_c3t]] mentioned something about a hidden easter egg called "Find The Message in the Stars". The only stars we see are a few on the NPPD website and the [[http://nppd.northpolechristmastown.com/favicon.ico][favicon.ico]] image.

#+begin_caution
Let me tell you right now. Working in teams is critical for finding things like this. The favicon.ico you want to look at is on the UNENCRYTPED site (http), not the SSL site (https). I was thinking I was crazy I couldn't find what my teammates were looking at.
#+end_caution

If we take a close look we notice something using 'strings'.

#+BEGIN_SRC
holiday@hack:~$ strings favicon.ico
<V{<
tq$km
&       c2
]```/

...

Jovr
gc7{`
7j&_(
        #'v'
-7Z-M
https://github.com/RobinDavid/LSB-Steganography
#+END_SRC

Interesting. The link [[https://github.com/RobinDavid/LSB-Steganography]] points to a repo that does stegonography with different data types using least significant bits. Let's use this against our favicon.ico file. If we clone the repo and copy our favicon.ico file over:

#+BEGIN_SRC
holiday@hack:~$ python LSBSteg.py decode -i favicon.ico -o secret
holiday@hack:~$ cat secret
Keep the change, you filthy animal
#+END_SRC

We now see that the favicon.ico was holding onto a little secret phrase, "Keep the change, you filthy animal", which was a phrase spoken by John "Johnny" Valentine in the movie "Angels with Filthy Souls". That, of course, was a fictional movie in the iconic classic Christmas movie, "Home Alone" where Kevin McAllister somehow avoids killing two robbers despite use of lethal force.


#+BEGIN_SRC

#+END_SRC

*** NPPD Siren

[[./images/siren.gif]]

According to [[http://nppd.northpolechristmastown.com/needhelp][the need help page on the NPPD site]], "In the event of an emergency, summon the NPPD by moving your mouse cursor back and forth over the menu bar of the website. Doing this from the infractions page gives optimal results." Doing so results in the video above where it looks like a siren.

*** Star Wars robots references in http://nppd.northpolechristmastown.com/robots.txt

The robots.txt page for the nppd site has a number of robot references as user-agents.
  * hk-47, a hunter-killer assassin droid
  * threepio, an obvious reference to C3PO. There's a =sand-crawler-delay= variable set to '421' which could be a reference to the storm trooper, TK-421, who was ambushed on the Millenium Falcon, and incidentally is also the only named Storm Trooper in the original trilogy.
  * artoo, an obvious reference to R2D2. There's a =sand-crawler-delay= variable set to '2187' which is likely a reference to the cell that Princess Leia was in on the Death Star.

*** Munchkins

In the Munchin BOLO, the munchkins disappeared after speaking something that sounded like 'puuurzgexgull'. This is most likely a reference to the word 'pyrzqxgl' which was a word described in the book 'The Magic of Oz'. A munchkin, incidentally named 'Bini Aru', like the munchkin in the BOLO, wrote down how to pronounce the word. The word was magical and could be used to transform a being into a different creature. Also, Boq is another munchkin named in the Land of Oz book series.

*** Konami Code

When exploring the game an interesting word popped up in the javascript, =konami= and =konami-code=. It's in this code [[https://2017.holidayhackchallenge.com/assets/hhc17-core-frontend.js]]. So what happens when we run it?

#+HTML: <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/aijC07KlKXQ?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

An interesting script called [[https://2017.holidayhackchallenge.com/assets/js/fontbomb.js][fontBomb]] gets called. This was written by [[https://twitter.com/plehoux][Phil Lehoux]]. Thanks Phil!

*** Reindeer Speak

#+BEGIN_SRC
hhhhhhhhhhhhhh723yhmn03z2784mn1

4cv24 2 342 34 zx5p2342zx1

42

10xc 3912 934u xd528034y2dnryhrhndr23n 234f 2bd4 5  8g 7238g4508 s23425


On 11/15/2017 11:18 AM, admin@northpolechristmastown.com wrote:
> Keep up the good job reindeer!
>
>
> On 11/15/2017 11:17 AM, reindeer@northpolechristmastown.com wrote:
>> t68 2`x4-`8- 28- 5t 3y=8 m89 cfqlhmniuxdk.hszv3ct79p137p2p t78 23t80
>> x 601x
>>
>> http://ghk.h-cdn.co/assets/cm/15/11/640x480/54ffe5266025c-dog1.jpg
>>
>> On 11/15/2017 10:28 AM, admin@northpolechristmastown.com wrote:
>>> Hi,
>>>
>>> Welcome to your new account.
>>
>
#+END_SRC

The reindeer appear to be speaking. Or randomly typing.

#+attr_html: :width 300px
[[./images/54ffe5266025c-dog1.jpg]]

** humans.txt

[[http://nppd.northpolechristmastown.com/humans.txt]] contains a message from
the challenge creators as well as.. something else!

#+INCLUDE: "../output/humans.txt" src

The blob looks a lot like hex encoded ascii, we can decode that using python:


#+BEGIN_SRC python
with open("../output/humans.txt") as f:
    txt = f.read()

#grab just the last paragraph
txt = txt.split("\n\n")[-1]

s = txt.replace("\n", "").strip()
decoded = binascii.unhexlify(s)

with open("humans.dat", 'wb') as f:
    f.write(decoded)
#+END_SRC

But the result is... binary data.  Running =file= on the resulting .dat file
shows:

#+BEGIN_SRC
humans.dat: zlib compressed data
#+END_SRC

decompressing it, and decoding the resulting base64 encoded data gives a punch card!

#+BEGIN_SRC
decompressed = zlib.decompress(decoded)
result = base64.decodestring(decompressed).decode('ascii')

print(result)
   __________________________________________________________________________________________________________________________________________________________________
  /                                                                                                                                                                 |
 /   # # #     #   #         #   #       # # #   #         #           #   # # # #     #   # # # #           # #   # #       #         # # #     #   #              |
|                                                                                                                                                                   |
|  #                   # #             #             # # #       # # #             #               #                   # #     #                                    |
|                                                                                                                                                                   |
|  0 0 0 0 0 # 0 # 0 0 0 0 # 0 0 0 # 0 0 0 0 0 # 0 0 0 0 0 0 # 0 0 0 0 0 0 0 0 0 0 0 # 0 0 0 0 0 0 0 # # 0 # 0 0 0 0 0 0 0 0 0 0 # # 0 0 0 0 0 0 0 # 0 0 0 0 0 0 0  |
|                                                                                                                                                                   |
|  1 # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 # 1 # 1 1 1 1 1 1 1 1 1 1 # 1 1 1 # 1 1 1 1 1 1 1 1 1 1 1 # 1 1 1 1 1 1  |
|                                                                                                                                                                   |
|  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 # 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 # 2 2 2 2 2 2 2 # 2 2 2 2 2 2 2 2 2 # 2 2 2 2 # 2 # 2 2 2 2 2 2 2 2 2 2 2 2 2  |
|                                                                                                                                                                   |
|  3 3 3 3 3 3 3 # 3 3 # 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 # 3 # 3 3 3 3 3 3 3 3 3 3 # 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3  |
|                                                                                                                                                                   |
|  # 4 # 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 # 4 # 4 4 4 4 # 4 4 # 4 4 4 4 4 4 4 # 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 # 4 4 4 4 4 4 4 4 4 4 4 4 4 # 4 4 4 4 4 4 4 4 4  |
|                                                                                                                                                                   |
|  5 5 5 # 5 5 5 5 5 5 5 5 # # 5 5 5 5 5 5 5 # 5 # 5 5 5 5 5 5 5 5 5 5 5 5 5 # 5 # # 5 # 5 5 5 5 5 # 5 5 5 5 5 # 5 5 5 5 5 5 5 5 5 5 5 5 5 # 5 5 # # 5 5 5 5 5 5 5  |
|                                                                                                                                                                   |
|  6 6 6 6 6 # 6 6 6 6 6 # 6 6 6 6 6 6 6 6 6 6 6 6 6 6 # # 6 6 6 6 6 # # 6 6 6 # 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 # 6 6 6 6 6 6 6 6 6 6 6 6  |
|                                                                                                                                                                   |
|  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 # 7 7 7 7 7 7 7 7 7 7 7 7 7 # 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7  |
|                                                                                                                                                                   |
|  8 8 8 8 8 8 8 8 # 8 8 8 8 8 8 8 # 8 8 8 8 8 # 8 8 8 8 8 8 # 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 # 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8  |
|                                                                                                                                                                   |
|  9 9 9 9 9 9 # 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 # 9 9 9 9 9 9 9 9 9 9 9 9 9 9 # 9 9 9 9 9 9 9 9 9 9 # 9 9 9 # 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9  |
|___________________________________________________________________________________________________________________________________________________________________|
#+END_SRC


This can be decoded by hand, but who has time for that.  We found
[[https://gist.githubusercontent.com/Pozo/1004284/raw/fa449480786be7af5e814e63e2a5a66e83d14aef/gistfile1.php][a decoder written in php]]

This decoder wants a binary matrix, so we have some cleaning up to do.   We
need to remove the border, remove empty lines, and convert the hash marks to 1,
and everything else to zero.


#+BEGIN_SRC python
card = result.splitlines()
# Strip the border from each line, and grab every other column
lines = [line[3:-2:2] for line in card]
#remove the header and footer and blank lines
lines = [line for line in lines if line.strip() and '_' not in line]

def convert(line):
    """Normalize the data to 0 and 1"""
    return ''.join('1' if c == '#' else '0' for c in line)

with open("punchcard.txt", 'w') as f:
    for line in lines:
        l = (convert(line));
        f.write(l)
#+END_SRC

The resulting matrix is

#+BEGIN_SRC
01110010100001010001110100001000001011110010111100000110110001000011100101000000
10000000001100000010000001110001110000001000000010000000001100100000000000000000
00000101000010001000001000000100000000000100000001101000000000011000000010000000
01000000000000000001000000000000000000000000101000000000010001000000000001000000
00000000000000010000000000000000000000000100000001000000000100001010000000000000
00000001001000000000000000000000000000000000000000101000000000010000000000000000
10100000000000000010100001001000000010000000000000000000100000000000001000000000
00010000000011000000010100000000000001011010000010000010000000000000100110000000
00000100000100000000000000110000011000100000000000000000000000000001000000000000
00000000000000000000000000000001000000000000010000000000000000000000000000000000
00000000100000001000001000000100000000000000000000000100000000000000000000000000
00000010000000000000000000000000100000000000000100000000001000100000000000000000
#+END_SRC

Using a small php script, we can use the existing code to decode this:


#+INCLUDE: "../tools/show_punchard.php" src php

This outputs =MADEWITHLOVEBYMADEYEMOODYPROFDEFENSEAGAINSTTHEDARKARTSBFE4EVA=

It turns out that the php punchard code does not handle empty columns as spaces, but 
adding an extra line:

#+BEGIN_SRC php
    case '000000000000': $t .=' ';break;
#+END_SRC

Gives us the intended result: =MADE WITH LOVE BY MADEYE MOODY PROF DEFENSE AGAINST THE DARK ARTS BFE 4EVA=

Incidentally, Professor Moody is [[https://twitter.com/madeye_c3t][@madeye_c3t]] and BFE refers to [[https://www.bitsforeveryone.com/][BitsForEveryone]].
