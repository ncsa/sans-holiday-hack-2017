* Answer Template
  :PROPERTIES:
  :CUSTOM_ID: answer-template
  :END:

** Question
   :PROPERTIES:
   :CUSTOM_ID: question
   :END:

#+BEGIN_EXAMPLE

                                 ______
                              .-"""".._'.       _,##
                       _..__ |.-"""-.|  |   _,##'`-._
                      (_____)||_____||  |_,##'`-._,##'`
                      _|   |.;-""-.  |  |#'`-._,##'`
                   _.;_ `--' `\    \ |.'`\._,##'`
                  /.-.\ `\     |.-";.`_, |##'`
                  |\__/   | _..;__  |'-' /
                  '.____.'_.-`)\--' /'-'`
                   //||\\(_.-'_,'-'`
                 (`-...-')_,##'`
          jgs _,##`-..,-;##`
           _,##'`-._,##'`
        _,##'`-._,##'`
          `-._,##'`
    My name is Pepper Minstix, and I need your help with my plight.
    I've crashed the Christmas toy train, for which I am quite contrite.
    I should not have interfered, hacking it was foolish in hindsight.
    If you can get it running again, I will reward you with a gift of delight.
#+END_EXAMPLE

** How to find the terminal
   :PROPERTIES:
   :CUSTOM_ID: how-to-find-the-terminal
   :END:

Where was the terminal?

https://docker2017.holidayhackchallenge.com/?challenge=4050467e-9cde-44cd-aa63-1a0b8b210bb7&uid=USER_ID

** Background Information
   :PROPERTIES:
   :CUSTOM_ID: background-information
   :END:

We're logged in as the user elf. There's a file called =trainstartup= in our home directory.

This is a 64-bit x86 system:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ uname -a
Linux 5e0a9637e4c6 4.9.0-4-amd64 #1 SMP Debian 4.9.65-3 (2017-12-03) x86_64 x86_64 x86_64 GNU/Linux
#+END_SRC

** Goal
   :PROPERTIES:
   :CUSTOM_ID: goal
   :END:

It looks like we just want to run the =trainstartup= file, but if we try that, we get an exec error:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ ./trainstartup 
bash: ./trainstartup: cannot execute binary file: Exec format error
#+END_SRC

** Approach
   :PROPERTIES:
   :CUSTOM_ID: approach
   :END:

There's really not much to go on here. We'll first use =file= to identify the =trainstartup= binary:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ file trainstartup 
trainstartup: ELF 32-bit LSB  executable, ARM, EABI5 version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=005de4685e8563d10b3de3e0be7d6fdd7ed732eb, not stripped
#+END_SRC

So the file is a Linux ELF binary, but it's for the ARM processor, and not for the x86_64 system that we're on. Let's see if there are any programs in our path that have =arm= in the file name:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ compgen -c | grep arm
qemu-arm
qemu-armeb
#+END_SRC

Running it with the help option gives us:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ qemu-arm -h
usage: qemu-arm [options] program [arguments...]
Linux CPU emulator (compiled for arm emulation)
...
#+END_SRC

This looks like exactly what we need. =qemu-arm= provides us with an ARM emulator, and we just need to run it with our program as the single argument. Let's give it a shot:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ qemu-arm ./trainstartup 
Starting up ... 

    Merry Christmas
    Merry Christmas
v
>*<
^
/o\
/   \               @.·
/~~   \                .
/ ° ~~  \         ·      
/      ~~ \       ◆       
/     °   ~~\      .   0
/~~           \    ─· ─ · o
    ┌┐       /° ·~~  .*·   . \
     ▒▒▒\     │  ──┬─°─┬─°─°─°─
≠==≠°=≠°=≠==──┼──=≠     ≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠
              │   /└───┘\┌───┐                                                 
                         └───┘                                                 
≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠==≠



You did it! Thank you!
#+END_SRC

Success!

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

You need to use =qemu-arm= to run the ARM binary: ~qemu-arm ./trainstartup~

AsciiCinema video of the solution?

** Alternatives
   :PROPERTIES:
   :CUSTOM_ID: alternatives
   :END:

The real difficulty of this terminal was in discovering that you
needed to use =qemu-arm=. ~compgen -c~ is a handy trick in CTFs to
figure out what special programs are installed on a certain
system. Another useful trick is using find to see what changes were
made to the system after it was installed. Let's take a quick look at
=qemu=arm= and at another file we know was changed, =trainstartup=:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ stat /usr/bin/qemu-arm trainstartup 
  File: '/usr/bin/qemu-arm'
  Size: 1725888         Blocks: 3376       IO Block: 4096   regular file
Device: 801h/2049d      Inode: 1049395     Links: 1
Access: (0755/-rwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2017-09-20 14:01:57.000000000 +0000
Modify: 2017-09-20 14:01:57.000000000 +0000
Change: 2017-12-06 20:01:07.719592650 +0000
 Birth: -
  File: 'trainstartup'
  Size: 454636          Blocks: 888        IO Block: 4096   regular file
Device: 801h/2049d      Inode: 1049511     Links: 1
Access: (0755/-rwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2017-12-07 18:43:55.000000000 +0000
Modify: 2017-12-07 18:43:55.000000000 +0000
Change: 2017-12-07 18:43:58.191037092 +0000
 Birth: -
#+END_SRC

If we look at the change time (or =ctime=), we can see that this
system was setup around December 6th, with the status of
=trainstartup= being changed the next day. An important thing to
remember with =ctime= is that the file contents didn't change, but
some data in the file inode did (permissions, creation,
etc.). Normally, we might use something like the modification time,
but that doesn't work well for files installed from packages.

A common way to setup a system is to first add sources to the package
manager, then install any necessary packages, and make any additional
modifications to a system. Let's use =find= to see what files were
modified after =/etc/apt= was changed, and we'll look for files with
=arm= in the name:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ find / -xdev -cnewer /etc/apt/sources.list | grep -w arm
/usr/bin/qemu-arm
/usr/share/man/man1/qemu-arm.1.gz
#+END_SRC

In this case, I'm using ~-xdev~ to restrict the =find= to files on the
same device (thus excluding =/sys=, =/proc=, etc.).

If that still didn't work, here's a one-liner to sort the files on the
system according to when their =ctime= was modified. This would enable
you to see a complete timeline of changes to files:

#+BEGIN_SRC sh
elf@5e0a9637e4c6:~$ find / -xdev -printf "%C+\t%p\n" | sort | head
2017-12-04+14:36:51.7363603170  /bin/bash
2017-12-04+14:36:51.7363603170  /bin/bunzip2
2017-12-04+14:36:51.7363603170  /bin/bzcat
2017-12-04+14:36:51.7363603170  /bin/bzcmp
2017-12-04+14:36:51.7363603170  /bin/bzdiff
2017-12-04+14:36:51.7363603170  /bin/bzegrep
...
#+END_SRC

** Common Pitfalls
   :PROPERTIES:
   :CUSTOM_ID: common-pitfalls
   :END:

This terminal was tricky because almost no information was
given. Knowing how to use =file= to identify that =trainstartup= was
an ARM binary, and knowing how to find =qemu-arm= was key.
