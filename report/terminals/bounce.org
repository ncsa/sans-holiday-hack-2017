* Bumbles Bounce
   :PROPERTIES:
   :CUSTOM_ID: title
   :END:

** Question
   :PROPERTIES:
   :CUSTOM_ID: question
   :END:

#+BEGIN_EXAMPLE
                               ._    _.
                               (_)  (_)                  <> \  / <>
                                .\::/.                   \_\/  \/_/ 
               .:.          _.=._\\//_.=._                  \\//
          ..   \o/   ..      '=' //\\ '='             _<>_\_\<>/_/_<>_
          :o|   |   |o:         '/::\'                 <> / /<>\ \ <>
           ~ '. ' .' ~         (_)  (_)      _    _       _ //\\ _
               >O<             '      '     /_/  \_\     / /\  /\ \
           _ .' . '. _                        \\//       <> /  \ <>
          :o|   |   |o:                   /\_\\><//_/\
          ''   /o\   ''     '.|  |.'      \/ //><\\ \/
               ':'        . ~~\  /~~ .       _//\\_
    jgs                   _\_._\/_._/_      \_\  /_/ 
                           / ' /\ ' \                   \o/
           o              ' __/  \__ '              _o/.:|:.\o_
      o    :    o         ' .'|  |'.                  .\:|:/.
        '.\'/.'                 .                 -=>>::>o<::<<=-
        :->@<-:                 :                   _ '/:|:\' _
        .'/.\'.           '.___/*\___.'              o\':|:'/o 
      o    :    o           \* \ / */                   /o\
           o                 >--X--<
                            /*_/ \_*\
                          .'   \*/   '.
                                :
                                '
    Minty Candycane here, I need your help straight away.
    We're having an argument about browser popularity stray.
    Use the supplied log file from our server in the North Pole.
    Identifying the least-popular browser is your noteworthy goal.
#+END_EXAMPLE

** How to find the terminal
   :PROPERTIES:
   :CUSTOM_ID: how-to-find-the-terminal
   :END:

From this game: https://2017.holidayhackchallenge.com/game/dbb44df8-af5e-4136-b72e-ebd9dfb32b4a

Direct link: https://docker2017.holidayhackchallenge.com/?challenge=595aeb87-d3b2-41a3-b612-fa553a30e822&uid=USER_ID

#+CAPTION: The terminal is located at the top of the right hand hill.
[[./images/terminal-location-bounce.png]]

** Background Information
   :PROPERTIES:
   :CUSTOM_ID: background-information
   :END:

** Goal
   :PROPERTIES:
   :CUSTOM_ID: goal
   :END:

The goal is to analyze a 'log file' and determine what the least popular browser.

** Hints
   :PROPERTIES:
   :CUSTOM_ID: hints
   :END:

[[https://twitter.com/SirMintsALot][Minty Candycane on Twitter has some hints]]
  * [[https://twitter.com/SirMintsALot/status/938187811869487104][The more I live my life as a Linux command-line user, the more I see problems waiting to be solved with cut, sort, uniq, head, and tail.]]
  * [[https://twitter.com/SirMintsALot/status/938188406546251777][Oh wow, @Sw4mp_f0x and @bluscreenofjeff did a great job on this Parsing for Pentesters series!]]
  * [[https://twitter.com/SirMintsALot/status/938574395240366080][The only thing that last article didn't really help me with was *counting* unique lines. This post looks super helpful for that! https://unix.stackexchange.com/questions/170043/sort-and-count-number-of-occurrence-of-lines/263849 â€¦ (it's even against web server logs, just the wrong field)]]

** Approach
   :PROPERTIES:
   :CUSTOM_ID: approach
   :END:

A directory listing shows that terminal contains a binary called 'runtoanswer',
as well as fairly large 'access.log' file:

#+BEGIN_SRC sh
elf@784e43534178:~$ ls -lh
total 29M
-rw-r--r-- 1 root root  24M Dec  4 17:11 access.log
-rwxr-xr-x 1 root root 5.0M Dec 11 17:31 runtoanswer
elf@784e43534178:~$ wc -l access.log 
98655 access.log

elf@784e43534178:~$ head -n1 access.log 
XX.YY.66.201 - - [19/Nov/2017:06:50:30 -0500] "GET /robots.txt HTTP/1.1" 301 185 "-" "Mozilla/5.0 (compatible; DotBot/1.1; http://www.opensiteexplorer.org/dotbot, help@moz.com)"
#+END_SRC

Seems we have a web log in the "Common Log Format", which as it turns out, used
to be called the "NCSA Common log format" when it was output by NCSA HTTPd in 1993
before that became apache.  It always struck me as an arbitrary log format..
Fields are separated by spaces, except for the date/time which is wrapped in
brackets.  Also except for the request which has the "method uri protocol"
quoted, and the user agent quoted as well.  Some fields are also hex encoded.  Anyway,
since we just want the user-agents, we can split the log lines on the double quote char.

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

My solution is to use the cut tool, along with sort and uniq to find the least popular browser.
cut is very limited compared to tools like awk or sed, but it is often simpler
to use.  We just need to grab the right field.

#+BEGIN_SRC sh
elf@784e43534178:~$ head -n 1 access.log |cut -d '"' -f 4
-
elf@784e43534178:~$ head -n 1 access.log |cut -d '"' -f 5
 
elf@784e43534178:~$ head -n 1 access.log |cut -d '"' -f 6
Mozilla/5.0 (compatible; DotBot/1.1; http://www.opensiteexplorer.org/dotbot, help@moz.com)
#+END_SRC

The 6th field is the user agent.  We also only want everything to the left of the first slash, so
different versions of the same browser are merged:

#+BEGIN_SRC sh
elf@784e43534178:~$ head -n 1 access.log |cut -d '"' -f 6|cut -d / -f 1
Mozilla
#+END_SRC

Now that the browser is isolated, we can switch head with cat, and use the
standard `sort | uniq -c | sort -n` to grab a frequency

#+BEGIN_SRC sh
elf@784e43534178:~$ cat access.log |cut -d '"' -f 6|cut -d / -f 1|sort|uniq -c|sort -n|tail -n 5
     33 slack
     34 Googlebot-Image
    143 -
    422 Slack-ImgProxy (+https:
  97896 Mozilla
#+END_SRC

Oops.. I mixed up the ordering, need the first 5, not the last 5:

#+BEGIN_SRC sh
elf@784e43534178:~$ cat access.log |cut -d '"' -f 6|cut -d / -f 1|sort|uniq -c|sort -n|head -n 5
      1 Dillo
      2 (KHTML, like Gecko) Chrome
      2 Slackbot-LinkExpanding 1.0 (+https:
      2 Telesphoreo
      2 Twitter
#+END_SRC

Looks like my favorite lightweight browser from 2001 is not very popular these days.

I can also confirm that the log file only has a single entry for this user-agent:

#+BEGIN_SRC sh
elf@784e43534178:~$ grep Dillo access.log 
XX.YY.54.139 - - [27/Nov/2017:19:41:49 -0500] "GET /invoker/JMXInvokerServlet HTTP/1.1" 301 185 "-" "Dillo/3.0.5"
#+END_SRC

TODO: AsciiCinema video of the solution?

** Alternatives
   :PROPERTIES:
   :CUSTOM_ID: alternatives
   :END:

TODO: Any other, easier solutions?

We can RE the binary.

** Common Pitfalls
   :PROPERTIES:
   :CUSTOM_ID: common-pitfalls
   :END:

The most common issue appeared to be the result of not normalizing the different browser versions.
If you count each VERSION of a browser as a separate program, you will get a result like:

#+BEGIN_SRC sh
elf@784e43534178:~$ cat access.log |cut -d '"' -f 6|sort|uniq  -c|sort -n|head -n 5
      1 Dillo/3.0.5
      1 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36
      1 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/604.3.5 (KHTML, like Gecko)
      1 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1
      1 Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko
#+END_SRC

or like:

#+BEGIN_SRC sh
elf@784e43534178:~$ cat access.log |cut -d '"' -f 6|cut -d ' ' -f 1|sort|uniq  -c|sort -n
      1 Dillo/3.0.5
      1 curl/7.35.0
#+END_SRC

** Loot
   :PROPERTIES:
   :CUSTOM_ID: loot
   :END:

Anything interesting hidden on the system?
TODO: not that i know of
