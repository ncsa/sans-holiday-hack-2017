* Question
  :PROPERTIES:
  :CUSTOM_ID: kansas_question
  :END:

#+BEGIN_EXAMPLE
                           *
                          .~'
                         O'~..
                        ~'O'~..
                       ~'O'~..~'
                      O'~..~'O'~.
                     .~'O'~..~'O'~
                    ..~'O'~..~'O'~.
                   .~'O'~..~'O'~..~'
                  O'~..~'O'~..~'O'~..
                 ~'O'~..~'O'~..~'O'~..
                ~'O'~..~'O'~..~'O'~..~'
               O'~..~'O'~..~'O'~..~'O'~.
              .~'O'~..~'O'~..~'O'~..~'O'~
             ..~'O'~..~'O'~..~'O'~..~'O'~.
            .~'O'~..~'O'~..~'O'~..~'O'~..~'
           O'~..~'O'~..~'O'~..~'O'~..~'O'~..
          ~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..
         ~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'
        O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~.
       .~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~
      ..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~.
     .~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'
    O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..~'O'~..

    Sugarplum Mary is in a tizzy, we hope you can assist.
    Christmas songs abound, with many likes in our midst.
    The database is populated, ready for you to address.
    Identify the song whose popularity is the best.
#+END_EXAMPLE

* How to find the terminal
  :PROPERTIES:
  :CUSTOM_ID: kansas_how-to-find-the-terminal
  :END:

From this game: https://2017.holidayhackchallenge.com/game/5bbfc970-71d2-4c9d-816c-25955536c168

Direct link: https://docker2017.holidayhackchallenge.com/?challenge=ab13b9fc-6e7c-4477-a8a1-bca7b616b877&uid=USER_ID

#+CAPTION: If you take away the poppies the terminal can easily be seen on the left hand side of the field.
[[./images/terminal-location-kansas.png]]

* Background Information
  :PROPERTIES:
  :CUSTOM_ID: kansas_background-information
  :END:

When we login, we see we have two files of interest in our current
directory: =christmassongs.db= and =runtoanswer=.

If we try running =runtoanswer=, we see:

#+BEGIN_SRC
elf@197ceebbd305:~$ ./runtoanswer 
Starting up, please wait......
Enter the name of the song with the most likes:
#+END_SRC

Blog Posts:

The SANS Pen-Test Blog had a post about essential SQL commands, which might be useful:

#+BEGIN_QUOTE
Your Pokemon Guide for Essential SQL Pen Test Commands
  https://pen-testing.sans.org/blog/2017/12/09/your-pokemon-guide-for-essential-sql-pen-test-commands
#+END_QUOTE

* Goal
  :PROPERTIES:
  :CUSTOM_ID: kansas_goal
  :END:

Determine which song in =christmassongs.db= has the most likes.

* Hints
  :PROPERTIES:
  :CUSTOM_ID: kansas_hints
  :END:

Sugarplum Mary on Twitter has a hint: 
#+HTML: <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Hey <a href="https://twitter.com/PepperyGoodness?ref_src=twsrc%5Etfw">@PepperyGoodness</a>, can you help me with an SQL problem I&#39;ve seen? I think I need to do GROUP BY, but I&#39;m not quite sure of the syntax.</p>&mdash; SugerPlum Mary (@ThePlumSweetest) <a href="https://twitter.com/ThePlumSweetest/status/941067133898833921?ref_src=twsrc%5Etfw">December 13, 2017</a></blockquote>

* Approach
  :PROPERTIES:
  :CUSTOM_ID: kansas_approach
  :END:

Let's see exactly what this "db" file is:

#+BEGIN_SRC
elf@0d0185762210:~$ less christmassongs.db 
bash: less: command not found
elf@0d0185762210:~$ more christmassongs.db 
SQLite format 3
...
#+END_SRC

sqlite!  Ok!  Let's start up sqlite and change some output options

#+BEGIN_SRC
elf@5cf3b692a837:~$ sqlite3 christmassongs.db 
SQLite version 3.11.0 2016-02-15 17:29:24
Enter ".help" for usage hints.
sqlite> .mode tabs  
sqlite> .headers on
#+END_SRC

Now, let's see what we are working with here.

#+BEGIN_SRC
sqlite> .schema
CREATE TABLE songs(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT,
  artist TEXT,
  year TEXT,
  notes TEXT
);
CREATE TABLE likes(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  like INTEGER,
  datetime INTEGER,
  songid INTEGER,
  FOREIGN KEY(songid) REFERENCES songs(id)
);
#+END_SRC

As a sanity check, let's see what one record of each looks like.

#+BEGIN_SRC
sqlite> select * from songs limit 1;
id      title   artist  year    notes
1       A' Soalin'      Peter, Paul & Mary      1963    From the album Moving. Written by Paul Stookey, Tracy Batteste & Elaina Mezzetti. Contains an element of "God Res
t Ye Merry, Gentlemen".
sqlite> select * from likes limit 1;
id      like    datetime        songid
1       1       1487102189      250
#+END_SRC

Two tables, "songs", and "likes".  =likes.songid= matches up with =songs.id=.
This means we can join the two tables together on =songs.id=likes.songid=.  Once that
is done, the solution requires the count of likes grouped by title:

#+BEGIN_SRC
sqlite> select title, count(*) from songs, likes where songs.id=likes.songid group by title order by count(*) desc limit 3;
title   count(*)
Stairway to Heaven      11325
Joy to the World        2162
The Little Boy that Santa Claus Forgot  2140
sqlite> 
#+END_SRC

* Solution
  :PROPERTIES:
  :CUSTOM_ID: kansas_solution
  :END:

A one-liner is:

#+BEGIN_SRC
elf@1dea81eaaac4:~$ sqlite3 christmassongs.db "select title from songs, likes where songs.id=likes.songid group by title order by count(*) desc limit 1;"
Stairway to Heaven
#+END_SRC

* Alternatives
  :PROPERTIES:
  :CUSTOM_ID: kansas_alternatives
  :END:

Instead of joining the tables, we can first find what the most popular songid is:

#+BEGIN_SRC 
sqlite> select songid, count(*) from likes group by songid order by count(*) desc limit 3;
songid  count(*)
392     11325
245     2162
265     2140
#+END_SRC

and then look up what the title for that song is

#+BEGIN_SRC 
sqlite> select title from songs where id=392;
title
Stairway to Heaven
sqlite> 
#+END_SRC


This can also be done in a single query as long as we don't care about the like count:

#+BEGIN_SRC 
sqlite> select title from songs where id = (select songid from likes group by songid order by count(*) desc limit 1);
Stairway to Heaven
#+END_SRC

This method even outperforms the join, taking about half the time to run!  This
is because the join has to examine all of the song titles, but the subquery
method only has to look at one.
